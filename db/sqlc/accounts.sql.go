// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: accounts.sql

package bankdb

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :execresult
INSERT INTO accounts (balance,currency, owner) VALUES (?,?,?)
`

type CreateAccountParams struct {
	Balance  int64         `json:"balance"`
	Currency string        `json:"currency"`
	Owner    sql.NullInt32 `json:"owner"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAccount, arg.Balance, arg.Currency, arg.Owner)
}

const getAccount = `-- name: GetAccount :many
SELECT id, balance, currency, owner FROM accounts WHERE owner = ?
`

func (q *Queries) GetAccount(ctx context.Context, owner sql.NullInt32) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAccount, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Balance,
			&i.Currency,
			&i.Owner,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccountById = `-- name: GetAccountById :one
SELECT id, balance, currency, owner FROM accounts WHERE owner = ? LIMIT 1
`

func (q *Queries) GetAccountById(ctx context.Context, owner sql.NullInt32) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountById, owner)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Balance,
		&i.Currency,
		&i.Owner,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :execresult
UPDATE accounts SET balance = ? WHERE owner = ?
`

type UpdateAccountParams struct {
	Balance int64         `json:"balance"`
	Owner   sql.NullInt32 `json:"owner"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateAccount, arg.Balance, arg.Owner)
}
