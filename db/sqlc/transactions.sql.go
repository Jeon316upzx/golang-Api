// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: transactions.sql

package bankdb

import (
	"context"
	"database/sql"
)

const createTransaction = `-- name: CreateTransaction :execresult
INSERT INTO transactions (type, amount, account) VALUES (?,?,?)
`

type CreateTransactionParams struct {
	Type    TransactionsType `json:"type"`
	Amount  int64            `json:"amount"`
	Account int32            `json:"account"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTransaction, arg.Type, arg.Amount, arg.Account)
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, type, created_at, amount, account FROM transactions WHERE id = ? LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id int32) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.CreatedAt,
		&i.Amount,
		&i.Account,
	)
	return i, err
}

const getTransactionBy = `-- name: GetTransactionBy :many
SELECT id, type, created_at, amount, account FROM transactions WHERE account = ?
`

func (q *Queries) GetTransactionBy(ctx context.Context, account int32) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionBy, account)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.CreatedAt,
			&i.Amount,
			&i.Account,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactions = `-- name: GetTransactions :many
SELECT id, type, created_at, amount, account FROM transactions
`

func (q *Queries) GetTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.CreatedAt,
			&i.Amount,
			&i.Account,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
