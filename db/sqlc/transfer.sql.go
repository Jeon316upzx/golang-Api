// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: transfer.sql

package bankdb

import (
	"context"
	"database/sql"
)

const createTransfer = `-- name: CreateTransfer :execresult
INSERT INTO transfer (amount, to_account, from_account) VALUES (?,?,?)
`

type CreateTransferParams struct {
	Amount      int64 `json:"amount"`
	ToAccount   int32 `json:"to_account"`
	FromAccount int32 `json:"from_account"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTransfer, arg.Amount, arg.ToAccount, arg.FromAccount)
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, amount, to_account, from_account, created_at FROM transfer WHERE id = ? LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, id int32) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.ToAccount,
		&i.FromAccount,
		&i.CreatedAt,
	)
	return i, err
}

const getTransferFrom = `-- name: GetTransferFrom :many
SELECT id, amount, to_account, from_account, created_at FROM transfer WHERE from_account = ?
`

func (q *Queries) GetTransferFrom(ctx context.Context, fromAccount int32) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getTransferFrom, fromAccount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.ToAccount,
			&i.FromAccount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransferTo = `-- name: GetTransferTo :many
SELECT id, amount, to_account, from_account, created_at FROM transfer WHERE to_account = ?
`

func (q *Queries) GetTransferTo(ctx context.Context, toAccount int32) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getTransferTo, toAccount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.ToAccount,
			&i.FromAccount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransfers = `-- name: GetTransfers :many
SELECT id, amount, to_account, from_account, created_at FROM transfer
`

func (q *Queries) GetTransfers(ctx context.Context) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getTransfers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.ToAccount,
			&i.FromAccount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
